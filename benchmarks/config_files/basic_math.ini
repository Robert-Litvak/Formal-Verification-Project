[add]
q1 = y >= 0
q2 = ret == x+y
# invariant_1 = (i >= 0) && (result + i == x+y)
invariant_1 = true

[sub]
q1 = y >= 0
q2 = ret == x-y
# invariant_1 = (i >= 0) && (result - i == x-y)
invariant_1 = true

[mul]
q1 = y >= 0
q2 = ret == x*y
# invariant_1 = (i >= 0) && (result + x*i == x*y)
invariant_1 = (result + x*i == x*y)

[div]
q1 = (0 < x) && (0 < y)
q2 = ret == x / y
invariant_1 = (0 < x) && (0 < y) && (0 <= q) && (0 <= r) && (x == q*y + r)

[mod]
q1 = (0 < x) && (0 < y)
# q2 = ret == x %% y
q2 = (0 <= ret) && (ret < y) && exists(i, x == i*y + ret)
invariant_1 = (0 < x) && (0 < y) && (0 <= q) && (0 <= r) && (x == q*y + r)

[abs]
q1 = true
q2 = !((!((x >= 0) && (ret == x))) && (!((x < 0) && (ret == -x))))

[fibonacci_1000_array]
q1 = length >= 2
q2 = (fib[0] == 1) && (fib[1] == 1) && forall(j, implies((1 < j) && (j < length), fib[j-2] + fib[j-1] == fib[j]))
invariant_1 = (fib[0] == 1) && (fib[1] == 1) && (1 < i) && (i <= length) && forall(k, implies((1 < k) && (k < i), fib[k-2] + fib[k-1] == fib[k]))
