temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH FIXED POINT
Verifying the function "factorials_array" from "benchmarks\json\advanced_math.c"
Fixed Point solver failed with error
The error:
b'spacer: quantifier in a recursive rule:\n<null>:\nquery!1(#3,#2,#1,#0) :- \n Invariant#1(#2,#1,#0),\n (= (select (:var 2) 0) 1),\n (= (select (:var 2) 1) 1),\n (not (< (:var 0) (:var 1))),\n (let ((a!1 (forall ((RUN$VAR_j_3 Int))\n             (let ((a!1 (= (select (:var 3) RUN$VAR_j_3)\n                           (* RUN$VAR_j_3 (select (:var 3) (- RUN$VAR_j_3 1))))))\n               (=> (and (> RUN$VAR_j_3 1) (< RUN$VAR_j_3 (:var 1))) a!1)))))\n  (= a!1 true)),\n (<= (:var 0) (:var 1)),\n (> (:var 0) 1),\n (let ((a!1 (= (select (:var 2) (:var 3))\n              (* (:var 3) (select (:var 2) (- (:var 3) 1))))))\n(let ((a!2 (and (= (select (:var 2) 0) 1)\n                (= (select (:var 2) 1) 1)\n                (=> (and (> (:var 3) 1) (< (:var 3) (:var 1))) a!1))))\n  (not a!2))).\n'


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH MANUAL HORN CLAUSES
Verifying the function "factorials_array" from "benchmarks\json\advanced_math.c"
Adding rules:
ForAll([factorials, length, i, TMP$ARR_0, TMP$ARR_1],
       Implies(And(True,
                   length > 1,
                   True,
                   And(Store(factorials, 0, 1) == TMP$ARR_0,
                       Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)),
               And(And(And(And(TMP$ARR_1[0] == 1,
                               TMP$ARR_1[1] == 1),
                           True),
                       length >= 2),
                   ForAll(RUN$VAR_j_0,
                          Implies(And(RUN$VAR_j_0 > 1,
                                      RUN$VAR_j_0 < 2),
                                  TMP$ARR_1[RUN$VAR_j_0] ==
                                  RUN$VAR_j_0*
                                  TMP$ARR_1[RUN$VAR_j_0 - 1])))))
#################################################################################################################
ForAll([factorials,
        length,
        i,
        TMP$ARR_0,
        TMP$ARR_1,
        factorials$IN$Invariant#1,
        length$IN$Invariant#1,
        i$IN$Invariant#1],
       Implies(And(True,
                   length > 1,
                   True,
                   And(Store(factorials, 0, 1) == TMP$ARR_0,
                       Store(TMP$ARR_0, 1, 1) == TMP$ARR_1),
                   And(factorials$IN$Invariant#1 ==
                       TMP$ARR_0,
                       length$IN$Invariant#1 == length,
                       i$IN$Invariant#1 == 2)),
               Invariant#1(factorials$IN$Invariant#1,
                           length$IN$Invariant#1,
                           i$IN$Invariant#1)))
#################################################################################################################
ForAll([factorials, length, i, TMP$ARR_0],
       Implies(And(Invariant#1(factorials, length, i),
                   And(And(And(And(factorials[0] == 1,
                                   factorials[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_j_1,
                              Implies(And(RUN$VAR_j_1 > 1,
                                        RUN$VAR_j_1 < i),
                                      factorials[RUN$VAR_j_1] ==
                                      RUN$VAR_j_1*
                                      factorials[RUN$VAR_j_1 -
                                        1]))),
                   i < length,
                   Store(factorials, i, i*factorials[i - 1]) ==
                   TMP$ARR_0),
               And(And(And(And(TMP$ARR_0[0] == 1,
                               TMP$ARR_0[1] == 1),
                           i + 1 > 1),
                       i + 1 <= length),
                   ForAll(RUN$VAR_j_2,
                          Implies(And(RUN$VAR_j_2 > 1,
                                      RUN$VAR_j_2 < i + 1),
                                  TMP$ARR_0[RUN$VAR_j_2] ==
                                  RUN$VAR_j_2*
                                  TMP$ARR_0[RUN$VAR_j_2 - 1])))))
#################################################################################################################
ForAll([factorials,
        length,
        i,
        TMP$ARR_0,
        factorials$IN$Invariant#1,
        length$IN$Invariant#1,
        i$IN$Invariant#1],
       Implies(And(Invariant#1(factorials, length, i),
                   And(And(And(And(factorials[0] == 1,
                                   factorials[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_j_1,
                              Implies(And(RUN$VAR_j_1 > 1,
                                        RUN$VAR_j_1 < i),
                                      factorials[RUN$VAR_j_1] ==
                                      RUN$VAR_j_1*
                                      factorials[RUN$VAR_j_1 -
                                        1]))),
                   i < length,
                   Store(factorials, i, i*factorials[i - 1]) ==
                   TMP$ARR_0,
                   And(factorials$IN$Invariant#1 ==
                       TMP$ARR_0,
                       length$IN$Invariant#1 == length,
                       i$IN$Invariant#1 == i + 1)),
               Invariant#1(factorials$IN$Invariant#1,
                           length$IN$Invariant#1,
                           i$IN$Invariant#1)))
#################################################################################################################
ForAll([factorials, length, i],
       Implies(And(Invariant#1(factorials, length, i),
                   And(And(And(And(factorials[0] == 1,
                                   factorials[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_j_3,
                              Implies(And(RUN$VAR_j_3 > 1,
                                        RUN$VAR_j_3 < i),
                                      factorials[RUN$VAR_j_3] ==
                                      RUN$VAR_j_3*
                                      factorials[RUN$VAR_j_3 -
                                        1]))),
                   Not(i < length),
                   True),
               And(And(factorials[0] == 1,
                       factorials[1] == 1),
                   ForAll(RUN$VAR_j_4,
                          Implies(And(RUN$VAR_j_4 > 1,
                                      RUN$VAR_j_4 < length),
                                  factorials[RUN$VAR_j_4] ==
                                  RUN$VAR_j_4*
                                  factorials[RUN$VAR_j_4 - 1])))))
#################################################################################################################
FAILED TO PROVE USING HORN CLAUSES
Z3 returned unknown


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING PATHS
Verifying the function "factorials_array" from "benchmarks\json\advanced_math.c"
Found 3 paths:

***START***
***ASSIGNMENT***	factorials[0] = 1
***ASSIGNMENT***	factorials[1] = 1
***ASSIGNMENT***	i = 2
***CONDITION***	i < length

R is:	True
Simplified R is:	True
T is:	{factorials: TMP$ARR_0, length: length, i: 2, TMP$ARR_0: TMP$ARR_1}
I_start(vars) is:	 length > 1
Simplified I_start(vars) is:	 Not(length <= 1)
I_end(T(vars)) is:	 And(And(And(And(TMP$ARR_1[0] == 1, TMP$ARR_1[1] == 1), True),
        length >= 2),
    ForAll(RUN$VAR_j_0,
           Implies(And(RUN$VAR_j_0 > 1, RUN$VAR_j_0 < 2),
                   TMP$ARR_1[RUN$VAR_j_0] ==
                   RUN$VAR_j_0*TMP$ARR_1[RUN$VAR_j_0 - 1])))
Simplified I_end(T(vars)) is:	 And(TMP$ARR_1[0] == 1,
    TMP$ARR_1[1] == 1,
    length >= 2,
    ForAll(RUN$VAR_j_0,
           Or(Not(And(Not(RUN$VAR_j_0 <= 1),
                      Not(2 <= RUN$VAR_j_0))),
              TMP$ARR_1[RUN$VAR_j_0] ==
              TMP$ARR_1[-1 + RUN$VAR_j_0]*RUN$VAR_j_0)))
Array constraints: And(Store(factorials, 0, 1) == TMP$ARR_0,
    Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)
Proving formula:
Implies(And(length > 1,
            True,
            And(Store(factorials, 0, 1) == TMP$ARR_0,
                Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)),
        And(And(And(And(TMP$ARR_1[0] == 1,
                        TMP$ARR_1[1] == 1),
                    True),
                length >= 2),
            ForAll(RUN$VAR_j_0,
                   Implies(And(RUN$VAR_j_0 > 1,
                               RUN$VAR_j_0 < 2),
                           TMP$ARR_1[RUN$VAR_j_0] ==
                           RUN$VAR_j_0*
                           TMP$ARR_1[RUN$VAR_j_0 - 1]))))
PROVED




***CONDITION***	i < length
True
***ASSIGNMENT***	factorials[i] = i*factorials[i - 1]
***ASSIGNMENT***	i = i + 1
***CONDITION***	i < length

R is:	i < length
Simplified R is:	Not(length <= i)
T is:	{factorials: TMP$ARR_0, length: length, i: i + 1}
I_start(vars) is:	 And(And(And(And(factorials[0] == 1, factorials[1] == 1),
            i > 1),
        i <= length),
    ForAll(RUN$VAR_j_1,
           Implies(And(RUN$VAR_j_1 > 1, RUN$VAR_j_1 < i),
                   factorials[RUN$VAR_j_1] ==
                   RUN$VAR_j_1*factorials[RUN$VAR_j_1 - 1])))
Simplified I_start(vars) is:	 And(factorials[0] == 1,
    factorials[1] == 1,
    Not(i <= 1),
    i <= length,
    ForAll(RUN$VAR_j_1,
           Or(Not(And(Not(RUN$VAR_j_1 <= 1),
                      Not(i <= RUN$VAR_j_1))),
              factorials[RUN$VAR_j_1] ==
              factorials[-1 + RUN$VAR_j_1]*RUN$VAR_j_1)))
I_end(T(vars)) is:	 And(And(And(And(TMP$ARR_0[0] == 1, TMP$ARR_0[1] == 1),
            i + 1 > 1),
        i + 1 <= length),
    ForAll(RUN$VAR_j_2,
           Implies(And(RUN$VAR_j_2 > 1, RUN$VAR_j_2 < i + 1),
                   TMP$ARR_0[RUN$VAR_j_2] ==
                   RUN$VAR_j_2*TMP$ARR_0[RUN$VAR_j_2 - 1])))
Simplified I_end(T(vars)) is:	 And(TMP$ARR_0[0] == 1,
    TMP$ARR_0[1] == 1,
    Not(i <= 0),
    i <= -1 + length,
    ForAll(RUN$VAR_j_2,
           Or(Not(And(Not(RUN$VAR_j_2 <= 1),
                      Not(i <= -1 + RUN$VAR_j_2))),
              TMP$ARR_0[RUN$VAR_j_2] ==
              TMP$ARR_0[-1 + RUN$VAR_j_2]*RUN$VAR_j_2)))
Array constraints: Store(factorials, i, i*factorials[i - 1]) == TMP$ARR_0
Proving formula:
Implies(And(And(And(And(And(factorials[0] == 1,
                            factorials[1] == 1),
                        i > 1),
                    i <= length),
                ForAll(RUN$VAR_j_1,
                       Implies(And(RUN$VAR_j_1 > 1,
                                   RUN$VAR_j_1 < i),
                               factorials[RUN$VAR_j_1] ==
                               RUN$VAR_j_1*
                               factorials[RUN$VAR_j_1 - 1]))),
            i < length,
            Store(factorials, i, i*factorials[i - 1]) ==
            TMP$ARR_0),
        And(And(And(And(TMP$ARR_0[0] == 1,
                        TMP$ARR_0[1] == 1),
                    i + 1 > 1),
                i + 1 <= length),
            ForAll(RUN$VAR_j_2,
                   Implies(And(RUN$VAR_j_2 > 1,
                               RUN$VAR_j_2 < i + 1),
                           TMP$ARR_0[RUN$VAR_j_2] ==
                           RUN$VAR_j_2*
                           TMP$ARR_0[RUN$VAR_j_2 - 1]))))
PROVED




***CONDITION***	i < length
False
***HALT***

R is:	Not(i < length)
Simplified R is:	length <= i
T is:	{factorials: factorials, length: length, i: i}
I_start(vars) is:	 And(And(And(And(factorials[0] == 1, factorials[1] == 1),
            i > 1),
        i <= length),
    ForAll(RUN$VAR_j_3,
           Implies(And(RUN$VAR_j_3 > 1, RUN$VAR_j_3 < i),
                   factorials[RUN$VAR_j_3] ==
                   RUN$VAR_j_3*factorials[RUN$VAR_j_3 - 1])))
Simplified I_start(vars) is:	 And(factorials[0] == 1,
    factorials[1] == 1,
    Not(i <= 1),
    i <= length,
    ForAll(RUN$VAR_j_3,
           Or(Not(And(Not(RUN$VAR_j_3 <= 1),
                      Not(i <= RUN$VAR_j_3))),
              factorials[RUN$VAR_j_3] ==
              factorials[-1 + RUN$VAR_j_3]*RUN$VAR_j_3)))
I_end(T(vars)) is:	 And(And(factorials[0] == 1, factorials[1] == 1),
    ForAll(RUN$VAR_j_4,
           Implies(And(RUN$VAR_j_4 > 1,
                       RUN$VAR_j_4 < length),
                   factorials[RUN$VAR_j_4] ==
                   RUN$VAR_j_4*factorials[RUN$VAR_j_4 - 1])))
Simplified I_end(T(vars)) is:	 And(factorials[0] == 1,
    factorials[1] == 1,
    ForAll(RUN$VAR_j_4,
           Or(Not(And(Not(RUN$VAR_j_4 <= 1),
                      Not(length <= RUN$VAR_j_4))),
              factorials[RUN$VAR_j_4] ==
              factorials[-1 + RUN$VAR_j_4]*RUN$VAR_j_4)))
Array constraints: True
Proving formula:
Implies(And(And(And(And(And(factorials[0] == 1,
                            factorials[1] == 1),
                        i > 1),
                    i <= length),
                ForAll(RUN$VAR_j_3,
                       Implies(And(RUN$VAR_j_3 > 1,
                                   RUN$VAR_j_3 < i),
                               factorials[RUN$VAR_j_3] ==
                               RUN$VAR_j_3*
                               factorials[RUN$VAR_j_3 - 1]))),
            Not(i < length),
            True),
        And(And(factorials[0] == 1, factorials[1] == 1),
            ForAll(RUN$VAR_j_4,
                   Implies(And(RUN$VAR_j_4 > 1,
                               RUN$VAR_j_4 < length),
                           factorials[RUN$VAR_j_4] ==
                           RUN$VAR_j_4*
                           factorials[RUN$VAR_j_4 - 1]))))
PROVED



PROGRAM VARIABLES:
factorials
i
length



PROGRAM IS SUCCESSFULLY PROVED
