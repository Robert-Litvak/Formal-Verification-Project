temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH FIXED POINT
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
Fixed Point solver failed with error
The error:
b'spacer: quantifier in a recursive rule:\n<null>:\nquery!1(#3,#2,#1,#0) :- \n Invariant#1(#2,#1,#0),\n (= (select (:var 2) 0) 1),\n (= (select (:var 2) 1) 1),\n (not (< (:var 0) (:var 1))),\n (let ((a!1 (forall ((RUN$VAR_k_3 Int))\n             (let ((a!1 (= (+ (select (:var 3) (- RUN$VAR_k_3 2))\n                              (select (:var 3) (- RUN$VAR_k_3 1)))\n                           (select (:var 3) RUN$VAR_k_3))))\n               (=> (and (> RUN$VAR_k_3 1) (< RUN$VAR_k_3 (:var 1))) a!1)))))\n  (= a!1 true)),\n (<= (:var 0) (:var 1)),\n (> (:var 0) 1),\n (let ((a!1 (= (+ (select (:var 2) (- (:var 3) 2))\n                 (select (:var 2) (- (:var 3) 1)))\n              (select (:var 2) (:var 3)))))\n(let ((a!2 (and (= (select (:var 2) 0) 1)\n                (= (select (:var 2) 1) 1)\n                (=> (and (> (:var 3) 1) (< (:var 3) (:var 1))) a!1))))\n  (not a!2))).\n'


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH MANUAL HORN CLAUSES
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
FAILED TO PROVE USING HORN CLAUSES
Z3 returned unknown


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING PATHS
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
Found 3 paths:

***START***
***ASSIGNMENT***	fib[0] = 1
***ASSIGNMENT***	fib[1] = 1
***ASSIGNMENT***	i = 2
***CONDITION***	i < length

PROVED




***CONDITION***	i < length
True
***ASSIGNMENT***	fib[i] = fib[i - 2] + fib[i - 1]
***ASSIGNMENT***	i = i + 1
***CONDITION***	i < length

PROVED




***CONDITION***	i < length
False
***HALT***

PROVED



PROGRAM IS SUCCESSFULLY PROVED
