temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH FIXED POINT
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
Fixed Point solver failed with error
The error:
b'spacer: quantifier in a recursive rule:\n<null>:\nquery!1(#3,#2,#1,#0) :- \n Invariant#1(#2,#1,#0),\n (= (select (:var 2) 0) 1),\n (= (select (:var 2) 1) 1),\n (not (< (:var 0) (:var 1))),\n (let ((a!1 (forall ((RUN$VAR_k_3 Int))\n             (let ((a!1 (= (+ (select (:var 3) (- RUN$VAR_k_3 2))\n                              (select (:var 3) (- RUN$VAR_k_3 1)))\n                           (select (:var 3) RUN$VAR_k_3))))\n               (=> (and (> RUN$VAR_k_3 1) (< RUN$VAR_k_3 (:var 1))) a!1)))))\n  (= a!1 true)),\n (<= (:var 0) (:var 1)),\n (> (:var 0) 1),\n (let ((a!1 (= (+ (select (:var 2) (- (:var 3) 2))\n                 (select (:var 2) (- (:var 3) 1)))\n              (select (:var 2) (:var 3)))))\n(let ((a!2 (and (= (select (:var 2) 0) 1)\n                (= (select (:var 2) 1) 1)\n                (=> (and (> (:var 3) 1) (< (:var 3) (:var 1))) a!1))))\n  (not a!2))).\n'


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH MANUAL HORN CLAUSES
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
Adding rules:
ForAll([fib, length, i, TMP$ARR_0, TMP$ARR_1],
       Implies(And(True,
                   length >= 2,
                   True,
                   And(Store(fib, 0, 1) == TMP$ARR_0,
                       Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)),
               And(And(And(And(TMP$ARR_1[0] == 1,
                               TMP$ARR_1[1] == 1),
                           True),
                       length >= 2),
                   ForAll(RUN$VAR_k_0,
                          Implies(And(RUN$VAR_k_0 > 1,
                                      RUN$VAR_k_0 < 2),
                                  TMP$ARR_1[RUN$VAR_k_0 - 2] +
                                  TMP$ARR_1[RUN$VAR_k_0 - 1] ==
                                  TMP$ARR_1[RUN$VAR_k_0])))))
#################################################################################################################
ForAll([fib,
        length,
        i,
        TMP$ARR_0,
        TMP$ARR_1,
        fib$IN$Invariant#1,
        length$IN$Invariant#1,
        i$IN$Invariant#1],
       Implies(And(True,
                   length >= 2,
                   True,
                   And(Store(fib, 0, 1) == TMP$ARR_0,
                       Store(TMP$ARR_0, 1, 1) == TMP$ARR_1),
                   And(fib$IN$Invariant#1 == TMP$ARR_0,
                       length$IN$Invariant#1 == length,
                       i$IN$Invariant#1 == 2)),
               Invariant#1(fib$IN$Invariant#1,
                           length$IN$Invariant#1,
                           i$IN$Invariant#1)))
#################################################################################################################
ForAll([fib, length, i, TMP$ARR_0],
       Implies(And(Invariant#1(fib, length, i),
                   And(And(And(And(fib[0] == 1, fib[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_k_1,
                              Implies(And(RUN$VAR_k_1 > 1,
                                        RUN$VAR_k_1 < i),
                                      fib[RUN$VAR_k_1 - 2] +
                                      fib[RUN$VAR_k_1 - 1] ==
                                      fib[RUN$VAR_k_1]))),
                   i < length,
                   Store(fib, i, fib[i - 2] + fib[i - 1]) ==
                   TMP$ARR_0),
               And(And(And(And(TMP$ARR_0[0] == 1,
                               TMP$ARR_0[1] == 1),
                           i + 1 > 1),
                       i + 1 <= length),
                   ForAll(RUN$VAR_k_2,
                          Implies(And(RUN$VAR_k_2 > 1,
                                      RUN$VAR_k_2 < i + 1),
                                  TMP$ARR_0[RUN$VAR_k_2 - 2] +
                                  TMP$ARR_0[RUN$VAR_k_2 - 1] ==
                                  TMP$ARR_0[RUN$VAR_k_2])))))
#################################################################################################################
ForAll([fib,
        length,
        i,
        TMP$ARR_0,
        fib$IN$Invariant#1,
        length$IN$Invariant#1,
        i$IN$Invariant#1],
       Implies(And(Invariant#1(fib, length, i),
                   And(And(And(And(fib[0] == 1, fib[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_k_1,
                              Implies(And(RUN$VAR_k_1 > 1,
                                        RUN$VAR_k_1 < i),
                                      fib[RUN$VAR_k_1 - 2] +
                                      fib[RUN$VAR_k_1 - 1] ==
                                      fib[RUN$VAR_k_1]))),
                   i < length,
                   Store(fib, i, fib[i - 2] + fib[i - 1]) ==
                   TMP$ARR_0,
                   And(fib$IN$Invariant#1 == TMP$ARR_0,
                       length$IN$Invariant#1 == length,
                       i$IN$Invariant#1 == i + 1)),
               Invariant#1(fib$IN$Invariant#1,
                           length$IN$Invariant#1,
                           i$IN$Invariant#1)))
#################################################################################################################
ForAll([fib, length, i],
       Implies(And(Invariant#1(fib, length, i),
                   And(And(And(And(fib[0] == 1, fib[1] == 1),
                               i > 1),
                           i <= length),
                       ForAll(RUN$VAR_k_3,
                              Implies(And(RUN$VAR_k_3 > 1,
                                        RUN$VAR_k_3 < i),
                                      fib[RUN$VAR_k_3 - 2] +
                                      fib[RUN$VAR_k_3 - 1] ==
                                      fib[RUN$VAR_k_3]))),
                   Not(i < length),
                   True),
               And(And(fib[0] == 1, fib[1] == 1),
                   ForAll(RUN$VAR_j_4,
                          Implies(And(RUN$VAR_j_4 > 1,
                                      RUN$VAR_j_4 < length),
                                  fib[RUN$VAR_j_4 - 2] +
                                  fib[RUN$VAR_j_4 - 1] ==
                                  fib[RUN$VAR_j_4])))))
#################################################################################################################
FAILED TO PROVE USING HORN CLAUSES
Z3 returned unknown


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING PATHS
Verifying the function "fibonacci_array" from "benchmarks\json\advanced_math.c"
Found 3 paths:

***START***
***ASSIGNMENT***	fib[0] = 1
***ASSIGNMENT***	fib[1] = 1
***ASSIGNMENT***	i = 2
***CONDITION***	i < length

R is:	True
T is:	{fib: TMP$ARR_0, length: length, i: 2, TMP$ARR_0: TMP$ARR_1}
I_start(vars) is:	 length >= 2
I_end(T(vars)) is:	 And(And(And(And(TMP$ARR_1[0] == 1, TMP$ARR_1[1] == 1), True),
        length >= 2),
    ForAll(RUN$VAR_k_0,
           Implies(And(RUN$VAR_k_0 > 1, RUN$VAR_k_0 < 2),
                   TMP$ARR_1[RUN$VAR_k_0 - 2] +
                   TMP$ARR_1[RUN$VAR_k_0 - 1] ==
                   TMP$ARR_1[RUN$VAR_k_0])))
Array constraints: And(Store(fib, 0, 1) == TMP$ARR_0,
    Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)
Proving formula:
Implies(And(length >= 2,
            True,
            And(Store(fib, 0, 1) == TMP$ARR_0,
                Store(TMP$ARR_0, 1, 1) == TMP$ARR_1)),
        And(And(And(And(TMP$ARR_1[0] == 1,
                        TMP$ARR_1[1] == 1),
                    True),
                length >= 2),
            ForAll(RUN$VAR_k_0,
                   Implies(And(RUN$VAR_k_0 > 1,
                               RUN$VAR_k_0 < 2),
                           TMP$ARR_1[RUN$VAR_k_0 - 2] +
                           TMP$ARR_1[RUN$VAR_k_0 - 1] ==
                           TMP$ARR_1[RUN$VAR_k_0]))))
PROVED




***CONDITION***	i < length
True
***ASSIGNMENT***	fib[i] = fib[i - 2] + fib[i - 1]
***ASSIGNMENT***	i = i + 1
***CONDITION***	i < length

R is:	i < length
T is:	{fib: TMP$ARR_0, length: length, i: i + 1}
I_start(vars) is:	 And(And(And(And(fib[0] == 1, fib[1] == 1), i > 1),
        i <= length),
    ForAll(RUN$VAR_k_1,
           Implies(And(RUN$VAR_k_1 > 1, RUN$VAR_k_1 < i),
                   fib[RUN$VAR_k_1 - 2] +
                   fib[RUN$VAR_k_1 - 1] ==
                   fib[RUN$VAR_k_1])))
I_end(T(vars)) is:	 And(And(And(And(TMP$ARR_0[0] == 1, TMP$ARR_0[1] == 1),
            i + 1 > 1),
        i + 1 <= length),
    ForAll(RUN$VAR_k_2,
           Implies(And(RUN$VAR_k_2 > 1, RUN$VAR_k_2 < i + 1),
                   TMP$ARR_0[RUN$VAR_k_2 - 2] +
                   TMP$ARR_0[RUN$VAR_k_2 - 1] ==
                   TMP$ARR_0[RUN$VAR_k_2])))
Array constraints: Store(fib, i, fib[i - 2] + fib[i - 1]) == TMP$ARR_0
Proving formula:
Implies(And(And(And(And(And(fib[0] == 1, fib[1] == 1),
                        i > 1),
                    i <= length),
                ForAll(RUN$VAR_k_1,
                       Implies(And(RUN$VAR_k_1 > 1,
                                   RUN$VAR_k_1 < i),
                               fib[RUN$VAR_k_1 - 2] +
                               fib[RUN$VAR_k_1 - 1] ==
                               fib[RUN$VAR_k_1]))),
            i < length,
            Store(fib, i, fib[i - 2] + fib[i - 1]) ==
            TMP$ARR_0),
        And(And(And(And(TMP$ARR_0[0] == 1,
                        TMP$ARR_0[1] == 1),
                    i + 1 > 1),
                i + 1 <= length),
            ForAll(RUN$VAR_k_2,
                   Implies(And(RUN$VAR_k_2 > 1,
                               RUN$VAR_k_2 < i + 1),
                           TMP$ARR_0[RUN$VAR_k_2 - 2] +
                           TMP$ARR_0[RUN$VAR_k_2 - 1] ==
                           TMP$ARR_0[RUN$VAR_k_2]))))
PROVED




***CONDITION***	i < length
False
***HALT***

R is:	Not(i < length)
T is:	{fib: fib, length: length, i: i}
I_start(vars) is:	 And(And(And(And(fib[0] == 1, fib[1] == 1), i > 1),
        i <= length),
    ForAll(RUN$VAR_k_3,
           Implies(And(RUN$VAR_k_3 > 1, RUN$VAR_k_3 < i),
                   fib[RUN$VAR_k_3 - 2] +
                   fib[RUN$VAR_k_3 - 1] ==
                   fib[RUN$VAR_k_3])))
I_end(T(vars)) is:	 And(And(fib[0] == 1, fib[1] == 1),
    ForAll(RUN$VAR_j_4,
           Implies(And(RUN$VAR_j_4 > 1,
                       RUN$VAR_j_4 < length),
                   fib[RUN$VAR_j_4 - 2] +
                   fib[RUN$VAR_j_4 - 1] ==
                   fib[RUN$VAR_j_4])))
Array constraints: True
Proving formula:
Implies(And(And(And(And(And(fib[0] == 1, fib[1] == 1),
                        i > 1),
                    i <= length),
                ForAll(RUN$VAR_k_3,
                       Implies(And(RUN$VAR_k_3 > 1,
                                   RUN$VAR_k_3 < i),
                               fib[RUN$VAR_k_3 - 2] +
                               fib[RUN$VAR_k_3 - 1] ==
                               fib[RUN$VAR_k_3]))),
            Not(i < length),
            True),
        And(And(fib[0] == 1, fib[1] == 1),
            ForAll(RUN$VAR_j_4,
                   Implies(And(RUN$VAR_j_4 > 1,
                               RUN$VAR_j_4 < length),
                           fib[RUN$VAR_j_4 - 2] +
                           fib[RUN$VAR_j_4 - 1] ==
                           fib[RUN$VAR_j_4]))))
PROVED



PROGRAM IS SUCCESSFULLY PROVED
