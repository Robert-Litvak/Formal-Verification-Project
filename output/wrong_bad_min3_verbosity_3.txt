temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH FIXED POINT
Cannot use fixed point for programs with paths that do not pass in loops


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING USING SPACER WITH MANUAL HORN CLAUSES
Verifying the function "bad_min3" from "benchmarks\json\wrong.c"
Adding rules:
ForAll([x, y, z, tmp, ret],
       Implies(And(True,
                   True,
                   And(Not(y < x), Not(z < x)),
                   True),
               And(And(And(Or(Or(x == x, x == y), x == z),
                           x <= x),
                       x <= y),
                   x <= z)))
#################################################################################################################
ForAll([x, y, z, tmp, ret],
       Implies(And(True, True, And(Not(y < x), z < x), True),
               And(And(And(Or(Or(x == x, x == y), x == z),
                           x <= x),
                       x <= y),
                   x <= z)))
#################################################################################################################
ForAll([x, y, z, tmp, ret],
       Implies(And(True, True, And(y < x, Not(z < y)), True),
               And(And(And(Or(Or(y == x, y == y), y == z),
                           y <= x),
                       y <= y),
                   y <= z)))
#################################################################################################################
ForAll([x, y, z, tmp, ret],
       Implies(And(True, True, And(y < x, z < y), True),
               And(And(And(Or(Or(x == x, x == y), x == z),
                           x <= x),
                       x <= y),
                   x <= z)))
#################################################################################################################
FAILED TO PROVE USING HORN CLAUSES
Z3 returned unsat


*****************************************************************************************************************
*****************************************************************************************************************
temp_configuration.c  -->  temp_configuration.c.ast.json

VERIFYING PATHS
Verifying the function "bad_min3" from "benchmarks\json\wrong.c"
Found 4 paths:

***START***
***ASSIGNMENT***	tmp = x
***CONDITION***	y < tmp
False
***CONDITION***	z < tmp
False
***ASSIGNMENT***	ret = tmp
***HALT***

R is:	And(Not(y < x), Not(z < x))
Simplified R is:	And(x <= y, x <= z)
T is:	{x: x, y: y, z: z, tmp: x, ret: x}
I_start(vars) is:	 True
Simplified I_start(vars) is:	 True
I_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),
    x <= z)
Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)
Array constraints: True
Proving formula:
Implies(And(True, And(Not(y < x), Not(z < x)), True),
        And(And(And(Or(Or(x == x, x == y), x == z), x <= x),
                x <= y),
            x <= z))
PROVED




***START***
***ASSIGNMENT***	tmp = x
***CONDITION***	y < tmp
False
***CONDITION***	z < tmp
True
***ASSIGNMENT***	tmp = x
***ASSIGNMENT***	ret = tmp
***HALT***

R is:	And(Not(y < x), z < x)
Simplified R is:	And(x <= y, Not(x <= z))
T is:	{x: x, y: y, z: z, tmp: x, ret: x}
I_start(vars) is:	 True
Simplified I_start(vars) is:	 True
I_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),
    x <= z)
Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)
Array constraints: True
Proving formula:
Implies(And(True, And(Not(y < x), z < x), True),
        And(And(And(Or(Or(x == x, x == y), x == z), x <= x),
                x <= y),
            x <= z))
FAILED TO PROVE
Z3 returned sat
ASSIGNMENT:
z = -1
y = 0
x = 0




***START***
***ASSIGNMENT***	tmp = x
***CONDITION***	y < tmp
True
***ASSIGNMENT***	tmp = y
***CONDITION***	z < tmp
False
***ASSIGNMENT***	ret = tmp
***HALT***

R is:	And(y < x, Not(z < y))
Simplified R is:	And(Not(x <= y), y <= z)
T is:	{x: x, y: y, z: z, tmp: y, ret: y}
I_start(vars) is:	 True
Simplified I_start(vars) is:	 True
I_end(T(vars)) is:	 And(And(And(Or(Or(y == x, y == y), y == z), y <= x), y <= y),
    y <= z)
Simplified I_end(T(vars)) is:	 And(y <= x, y <= z)
Array constraints: True
Proving formula:
Implies(And(True, And(y < x, Not(z < y)), True),
        And(And(And(Or(Or(y == x, y == y), y == z), y <= x),
                y <= y),
            y <= z))
PROVED




***START***
***ASSIGNMENT***	tmp = x
***CONDITION***	y < tmp
True
***ASSIGNMENT***	tmp = y
***CONDITION***	z < tmp
True
***ASSIGNMENT***	tmp = x
***ASSIGNMENT***	ret = tmp
***HALT***

R is:	And(y < x, z < y)
Simplified R is:	And(Not(x <= y), Not(y <= z))
T is:	{x: x, y: y, z: z, tmp: x, ret: x}
I_start(vars) is:	 True
Simplified I_start(vars) is:	 True
I_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),
    x <= z)
Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)
Array constraints: True
Proving formula:
Implies(And(True, And(y < x, z < y), True),
        And(And(And(Or(Or(x == x, x == y), x == z), x <= x),
                x <= y),
            x <= z))
FAILED TO PROVE
Z3 returned sat
ASSIGNMENT:
z = -1
x = 1
y = 0



FAILED TO PROVE THE PROGRAM
SEE THE FOLLOWING PATHS:
Path begin at: ***START***
Path ends at ***HALT***
Path action items are [None, None, False, True, None, None]
Path begin at: ***START***
Path ends at ***HALT***
Path action items are [None, None, True, None, True, None, None]
