*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\array.c.ast.json -f min3_array
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 4 paths:***START******CONDITION***	arr[i] < arr[j]False***CONDITION***	arr[j] < arr[k]False***ASSIGNMENT***	ret = arr[k]***HALT***R is:	And(And(True, Not(arr[i] < arr[j])), Not(arr[j] < arr[k]))Simplified R is:	And(arr[j] <= arr[i], arr[k] <= arr[j])T is:	{arr: arr, i: i, j: j, k: k, ret: arr[k]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[k] == arr[i], arr[k] == arr[j]),               arr[k] == arr[k]),            arr[k] <= arr[i]),        arr[k] <= arr[j]),    arr[k] <= arr[k])Simplified I_end(T(vars)) is:	 And(arr[k] <= arr[i], arr[k] <= arr[j])Array constraints: TruePROVED***START******CONDITION***	arr[i] < arr[j]False***CONDITION***	arr[j] < arr[k]True***ASSIGNMENT***	ret = arr[j]***HALT***R is:	And(And(True, Not(arr[i] < arr[j])), arr[j] < arr[k])Simplified R is:	And(arr[j] <= arr[i], Not(arr[k] <= arr[j]))T is:	{arr: arr, i: i, j: j, k: k, ret: arr[j]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[j] == arr[i], arr[j] == arr[j]),               arr[j] == arr[k]),            arr[j] <= arr[i]),        arr[j] <= arr[j]),    arr[j] <= arr[k])Simplified I_end(T(vars)) is:	 And(arr[j] <= arr[i], arr[j] <= arr[k])Array constraints: TruePROVED***START******CONDITION***	arr[i] < arr[j]True***CONDITION***	arr[i] < arr[k]False***ASSIGNMENT***	ret = arr[k]***HALT***R is:	And(And(True, arr[i] < arr[j]), Not(arr[i] < arr[k]))Simplified R is:	And(Not(arr[j] <= arr[i]), arr[k] <= arr[i])T is:	{arr: arr, i: i, j: j, k: k, ret: arr[k]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[k] == arr[i], arr[k] == arr[j]),               arr[k] == arr[k]),            arr[k] <= arr[i]),        arr[k] <= arr[j]),    arr[k] <= arr[k])Simplified I_end(T(vars)) is:	 And(arr[k] <= arr[i], arr[k] <= arr[j])Array constraints: TruePROVED***START******CONDITION***	arr[i] < arr[j]True***CONDITION***	arr[i] < arr[k]True***ASSIGNMENT***	ret = arr[i]***HALT***R is:	And(And(True, arr[i] < arr[j]), arr[i] < arr[k])Simplified R is:	And(Not(arr[j] <= arr[i]), Not(arr[k] <= arr[i]))T is:	{arr: arr, i: i, j: j, k: k, ret: arr[i]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[i] == arr[i], arr[i] == arr[j]),               arr[i] == arr[k]),            arr[i] <= arr[i]),        arr[i] <= arr[j]),    arr[i] <= arr[k])Simplified I_end(T(vars)) is:	 And(arr[i] <= arr[j], arr[i] <= arr[k])Array constraints: TruePROVEDPROGRAM VARIABLES:arrijkretPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\array.c.ast.json -f min3_array_indirect
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 4 paths:***START******CONDITION***	arr[is[0]] < arr[is[1]]False***CONDITION***	arr[is[1]] < arr[is[2]]False***ASSIGNMENT***	ret = arr[is[2]]***HALT***R is:	And(And(True, Not(arr[is[0]] < arr[is[1]])),    Not(arr[is[1]] < arr[is[2]]))Simplified R is:	And(arr[is[1]] <= arr[is[0]], arr[is[2]] <= arr[is[1]])T is:	{arr: arr, is: is, ret: arr[is[2]]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[is[2]] == arr[is[0]],                  arr[is[2]] == arr[is[1]]),               arr[is[2]] == arr[is[2]]),            arr[is[2]] <= arr[is[0]]),        arr[is[2]] <= arr[is[1]]),    arr[is[2]] <= arr[is[2]])Simplified I_end(T(vars)) is:	 And(arr[is[2]] <= arr[is[0]], arr[is[2]] <= arr[is[1]])Array constraints: TruePROVED***START******CONDITION***	arr[is[0]] < arr[is[1]]False***CONDITION***	arr[is[1]] < arr[is[2]]True***ASSIGNMENT***	ret = arr[is[1]]***HALT***R is:	And(And(True, Not(arr[is[0]] < arr[is[1]])),    arr[is[1]] < arr[is[2]])Simplified R is:	And(arr[is[1]] <= arr[is[0]], Not(arr[is[2]] <= arr[is[1]]))T is:	{arr: arr, is: is, ret: arr[is[1]]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[is[1]] == arr[is[0]],                  arr[is[1]] == arr[is[1]]),               arr[is[1]] == arr[is[2]]),            arr[is[1]] <= arr[is[0]]),        arr[is[1]] <= arr[is[1]]),    arr[is[1]] <= arr[is[2]])Simplified I_end(T(vars)) is:	 And(arr[is[1]] <= arr[is[0]], arr[is[1]] <= arr[is[2]])Array constraints: TruePROVED***START******CONDITION***	arr[is[0]] < arr[is[1]]True***CONDITION***	arr[is[0]] < arr[is[2]]False***ASSIGNMENT***	ret = arr[is[2]]***HALT***R is:	And(And(True, arr[is[0]] < arr[is[1]]),    Not(arr[is[0]] < arr[is[2]]))Simplified R is:	And(Not(arr[is[1]] <= arr[is[0]]), arr[is[2]] <= arr[is[0]])T is:	{arr: arr, is: is, ret: arr[is[2]]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[is[2]] == arr[is[0]],                  arr[is[2]] == arr[is[1]]),               arr[is[2]] == arr[is[2]]),            arr[is[2]] <= arr[is[0]]),        arr[is[2]] <= arr[is[1]]),    arr[is[2]] <= arr[is[2]])Simplified I_end(T(vars)) is:	 And(arr[is[2]] <= arr[is[0]], arr[is[2]] <= arr[is[1]])Array constraints: TruePROVED***START******CONDITION***	arr[is[0]] < arr[is[1]]True***CONDITION***	arr[is[0]] < arr[is[2]]True***ASSIGNMENT***	ret = arr[is[0]]***HALT***R is:	And(And(True, arr[is[0]] < arr[is[1]]),    arr[is[0]] < arr[is[2]])Simplified R is:	And(Not(arr[is[1]] <= arr[is[0]]),    Not(arr[is[2]] <= arr[is[0]]))T is:	{arr: arr, is: is, ret: arr[is[0]]}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(arr[is[0]] == arr[is[0]],                  arr[is[0]] == arr[is[1]]),               arr[is[0]] == arr[is[2]]),            arr[is[0]] <= arr[is[0]]),        arr[is[0]] <= arr[is[1]]),    arr[is[0]] <= arr[is[2]])Simplified I_end(T(vars)) is:	 And(arr[is[0]] <= arr[is[1]], arr[is[0]] <= arr[is[2]])Array constraints: TruePROVEDPROGRAM VARIABLES:arrisretPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\array.c.ast.json -f sort3
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 8 paths:***START******CONDITION***	arr[i] > arr[i + 1]False***CONDITION***	arr[i + 1] > arr[i + 2]False***CONDITION***	arr[i] > arr[i + 1]False***HALT***R is:	And(And(And(True, Not(arr[i] > arr[i + 1])),        Not(arr[i + 1] > arr[i + 2])),    Not(arr[i] > arr[i + 1]))Simplified R is:	And(arr[i] <= arr[1 + i], arr[1 + i] <= arr[2 + i])T is:	{arr: arr, i: i, tmp: tmp}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(arr[i] <= arr[i + 1], arr[i + 1] <= arr[i + 2])Simplified I_end(T(vars)) is:	 And(arr[i] <= arr[1 + i], arr[1 + i] <= arr[2 + i])Array constraints: TruePROVED***START******CONDITION***	arr[i] > arr[i + 1]False***CONDITION***	arr[i + 1] > arr[i + 2]False***CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***HALT***R is:	And(And(And(True, Not(arr[i] > arr[i + 1])),        Not(arr[i + 1] > arr[i + 2])),    arr[i] > arr[i + 1])Simplified R is:	FalseT is:	{arr: TMP$ARR_0, i: i, tmp: arr[i], TMP$ARR_0: TMP$ARR_1}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[i + 1],    TMP$ARR_1[i + 1] <= TMP$ARR_1[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[1 + i],    TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i])Array constraints: And(And(True, Store(arr, i, arr[i + 1]) == TMP$ARR_0),    Store(TMP$ARR_0, i + 1, arr[i]) == TMP$ARR_1)PROVED***START******CONDITION***	arr[i] > arr[i + 1]False***CONDITION***	arr[i + 1] > arr[i + 2]True***ASSIGNMENT***	tmp = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = arr[i + 2]***ASSIGNMENT***	arr[i + 2] = tmp***CONDITION***	arr[i] > arr[i + 1]False***HALT***R is:	And(And(And(True, Not(arr[i] > arr[i + 1])),        arr[i + 1] > arr[i + 2]),    Not(TMP$ARR_1[i] > TMP$ARR_1[i + 1]))Simplified R is:	And(arr[i] <= arr[1 + i],    Not(arr[1 + i] <= arr[2 + i]),    TMP$ARR_1[i] <= TMP$ARR_1[1 + i])T is:	{arr: TMP$ARR_0, i: i, tmp: arr[i + 1], TMP$ARR_0: TMP$ARR_1}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[i + 1],    TMP$ARR_1[i + 1] <= TMP$ARR_1[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[1 + i],    TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i])Array constraints: And(And(True, Store(arr, i + 1, arr[i + 2]) == TMP$ARR_0),    Store(TMP$ARR_0, i + 2, arr[i + 1]) == TMP$ARR_1)PROVED***START******CONDITION***	arr[i] > arr[i + 1]False***CONDITION***	arr[i + 1] > arr[i + 2]True***ASSIGNMENT***	tmp = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = arr[i + 2]***ASSIGNMENT***	arr[i + 2] = tmp***CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***HALT***R is:	And(And(And(True, Not(arr[i] > arr[i + 1])),        arr[i + 1] > arr[i + 2]),    TMP$ARR_1[i] > TMP$ARR_1[i + 1])Simplified R is:	And(arr[i] <= arr[1 + i],    Not(arr[1 + i] <= arr[2 + i]),    Not(TMP$ARR_1[i] <= TMP$ARR_1[1 + i]))T is:	{arr: TMP$ARR_0, i: i, tmp: TMP$ARR_1[i], TMP$ARR_0: TMP$ARR_1, TMP$ARR_1: TMP$ARR_2, TMP$ARR_2: TMP$ARR_3}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[i + 1],    TMP$ARR_3[i + 1] <= TMP$ARR_3[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[1 + i],    TMP$ARR_3[1 + i] <= TMP$ARR_3[2 + i])Array constraints: And(And(And(And(True,                Store(arr, i + 1, arr[i + 2]) == TMP$ARR_0),            Store(TMP$ARR_0, i + 2, arr[i + 1]) == TMP$ARR_1),        Store(TMP$ARR_1, i, TMP$ARR_1[i + 1]) == TMP$ARR_2),    Store(TMP$ARR_2, i + 1, TMP$ARR_1[i]) == TMP$ARR_3)PROVED***START******CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***CONDITION***	arr[i + 1] > arr[i + 2]False***CONDITION***	arr[i] > arr[i + 1]False***HALT***R is:	And(And(And(True, arr[i] > arr[i + 1]),        Not(TMP$ARR_1[i + 1] > TMP$ARR_1[i + 2])),    Not(TMP$ARR_1[i] > TMP$ARR_1[i + 1]))Simplified R is:	And(Not(arr[i] <= arr[1 + i]),    TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i],    TMP$ARR_1[i] <= TMP$ARR_1[1 + i])T is:	{arr: TMP$ARR_0, i: i, tmp: arr[i], TMP$ARR_0: TMP$ARR_1}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[i + 1],    TMP$ARR_1[i + 1] <= TMP$ARR_1[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_1[i] <= TMP$ARR_1[1 + i],    TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i])Array constraints: And(And(True, Store(arr, i, arr[i + 1]) == TMP$ARR_0),    Store(TMP$ARR_0, i + 1, arr[i]) == TMP$ARR_1)PROVED***START******CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***CONDITION***	arr[i + 1] > arr[i + 2]False***CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***HALT***R is:	And(And(And(True, arr[i] > arr[i + 1]),        Not(TMP$ARR_1[i + 1] > TMP$ARR_1[i + 2])),    TMP$ARR_1[i] > TMP$ARR_1[i + 1])Simplified R is:	And(Not(arr[i] <= arr[1 + i]),    TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i],    Not(TMP$ARR_1[i] <= TMP$ARR_1[1 + i]))T is:	{arr: TMP$ARR_0, i: i, tmp: TMP$ARR_1[i], TMP$ARR_0: TMP$ARR_1, TMP$ARR_1: TMP$ARR_2, TMP$ARR_2: TMP$ARR_3}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[i + 1],    TMP$ARR_3[i + 1] <= TMP$ARR_3[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[1 + i],    TMP$ARR_3[1 + i] <= TMP$ARR_3[2 + i])Array constraints: And(And(And(And(True,                Store(arr, i, arr[i + 1]) == TMP$ARR_0),            Store(TMP$ARR_0, i + 1, arr[i]) == TMP$ARR_1),        Store(TMP$ARR_1, i, TMP$ARR_1[i + 1]) == TMP$ARR_2),    Store(TMP$ARR_2, i + 1, TMP$ARR_1[i]) == TMP$ARR_3)PROVED***START******CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***CONDITION***	arr[i + 1] > arr[i + 2]True***ASSIGNMENT***	tmp = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = arr[i + 2]***ASSIGNMENT***	arr[i + 2] = tmp***CONDITION***	arr[i] > arr[i + 1]False***HALT***R is:	And(And(And(True, arr[i] > arr[i + 1]),        TMP$ARR_1[i + 1] > TMP$ARR_1[i + 2]),    Not(TMP$ARR_3[i] > TMP$ARR_3[i + 1]))Simplified R is:	And(Not(arr[i] <= arr[1 + i]),    Not(TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i]),    TMP$ARR_3[i] <= TMP$ARR_3[1 + i])T is:	{arr: TMP$ARR_0, i: i, tmp: TMP$ARR_1[i + 1], TMP$ARR_0: TMP$ARR_1, TMP$ARR_1: TMP$ARR_2, TMP$ARR_2: TMP$ARR_3}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[i + 1],    TMP$ARR_3[i + 1] <= TMP$ARR_3[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_3[i] <= TMP$ARR_3[1 + i],    TMP$ARR_3[1 + i] <= TMP$ARR_3[2 + i])Array constraints: And(And(And(And(True,                Store(arr, i, arr[i + 1]) == TMP$ARR_0),            Store(TMP$ARR_0, i + 1, arr[i]) == TMP$ARR_1),        Store(TMP$ARR_1, i + 1, TMP$ARR_1[i + 2]) ==        TMP$ARR_2),    Store(TMP$ARR_2, i + 2, TMP$ARR_1[i + 1]) == TMP$ARR_3)PROVED***START******CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***CONDITION***	arr[i + 1] > arr[i + 2]True***ASSIGNMENT***	tmp = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = arr[i + 2]***ASSIGNMENT***	arr[i + 2] = tmp***CONDITION***	arr[i] > arr[i + 1]True***ASSIGNMENT***	tmp = arr[i]***ASSIGNMENT***	arr[i] = arr[i + 1]***ASSIGNMENT***	arr[i + 1] = tmp***HALT***R is:	And(And(And(True, arr[i] > arr[i + 1]),        TMP$ARR_1[i + 1] > TMP$ARR_1[i + 2]),    TMP$ARR_3[i] > TMP$ARR_3[i + 1])Simplified R is:	And(Not(arr[i] <= arr[1 + i]),    Not(TMP$ARR_1[1 + i] <= TMP$ARR_1[2 + i]),    Not(TMP$ARR_3[i] <= TMP$ARR_3[1 + i]))T is:	{arr: TMP$ARR_0, i: i, tmp: TMP$ARR_3[i], TMP$ARR_0: TMP$ARR_1, TMP$ARR_1: TMP$ARR_2, TMP$ARR_2: TMP$ARR_3, TMP$ARR_3: TMP$ARR_4, TMP$ARR_4: TMP$ARR_5}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(TMP$ARR_5[i] <= TMP$ARR_5[i + 1],    TMP$ARR_5[i + 1] <= TMP$ARR_5[i + 2])Simplified I_end(T(vars)) is:	 And(TMP$ARR_5[i] <= TMP$ARR_5[1 + i],    TMP$ARR_5[1 + i] <= TMP$ARR_5[2 + i])Array constraints: And(And(And(And(And(And(True,                        Store(arr, i, arr[i + 1]) ==                        TMP$ARR_0),                    Store(TMP$ARR_0, i + 1, arr[i]) ==                    TMP$ARR_1),                Store(TMP$ARR_1, i + 1, TMP$ARR_1[i + 2]) ==                TMP$ARR_2),            Store(TMP$ARR_2, i + 2, TMP$ARR_1[i + 1]) ==            TMP$ARR_3),        Store(TMP$ARR_3, i, TMP$ARR_3[i + 1]) == TMP$ARR_4),    Store(TMP$ARR_4, i + 1, TMP$ARR_3[i]) == TMP$ARR_5)PROVEDPROGRAM VARIABLES:arritmpPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\b1.c.ast.json -f array_index_value_id
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 5 paths:***START******ASSIGNMENT***	i = 0***CONDITION***	i < 100R is:	TrueSimplified R is:	TrueT is:	{result: result, j: j, i: 0}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(True, True),    ForAll(k2,           Implies(And(k2 >= 0, k2 < 0), result[k2] == 0)))Simplified I_end(T(vars)) is:	 ForAll(k2,       Or(Not(And(k2 >= 0, Not(0 <= k2))), result[k2] == 0))Array constraints: TruePROVED***CONDITION***	i < 100True***ASSIGNMENT***	result[i] = 0***ASSIGNMENT***	i = i + 1***CONDITION***	i < 100R is:	And(True, i < 100)Simplified R is:	Not(100 <= i)T is:	{result: TMP$ARR_0, j: j, i: i + 1}I_start(vars) is:	 And(And(i >= 0, i <= 100),    ForAll(k2,           Implies(And(k2 >= 0, k2 < i), result[k2] == 0)))Simplified I_start(vars) is:	 And(i >= 0,    i <= 100,    ForAll(k2,           Or(Not(And(k2 >= 0, Not(i <= k2))),              result[k2] == 0)))I_end(T(vars)) is:	 And(And(i + 1 >= 0, i + 1 <= 100),    ForAll(k2,           Implies(And(k2 >= 0, k2 < i + 1),                   TMP$ARR_0[k2] == 0)))Simplified I_end(T(vars)) is:	 And(i >= -1,    i <= 99,    ForAll(k2,           Or(Not(And(k2 >= 0, Not(i <= -1 + k2))),              TMP$ARR_0[k2] == 0)))Array constraints: And(True, Store(result, i, 0) == TMP$ARR_0)PROVED***CONDITION***	i < 100False***ASSIGNMENT***	j = 1***CONDITION***	j < 100R is:	And(True, Not(i < 100))Simplified R is:	100 <= iT is:	{result: result, j: 1, i: i}I_start(vars) is:	 And(And(i >= 0, i <= 100),    ForAll(k2,           Implies(And(k2 >= 0, k2 < i), result[k2] == 0)))Simplified I_start(vars) is:	 And(i >= 0,    i <= 100,    ForAll(k2,           Or(Not(And(k2 >= 0, Not(i <= k2))),              result[k2] == 0)))I_end(T(vars)) is:	 And(And(True, True),    ForAll(k3,           Implies(And(k3 >= 0, k3 < 1), result[k3] == k3)))Simplified I_end(T(vars)) is:	 ForAll(k3,       Or(Not(And(k3 >= 0, Not(1 <= k3))), result[k3] == k3))Array constraints: TruePROVED***CONDITION***	j < 100True***ASSIGNMENT***	result[j] = result[j - 1] + 1***ASSIGNMENT***	j = j + 1***CONDITION***	j < 100R is:	And(True, j < 100)Simplified R is:	Not(100 <= j)T is:	{result: TMP$ARR_0, j: j + 1, i: i}I_start(vars) is:	 And(And(j >= 1, j <= 100),    ForAll(k3,           Implies(And(k3 >= 0, k3 < j), result[k3] == k3)))Simplified I_start(vars) is:	 And(j >= 1,    j <= 100,    ForAll(k3,           Or(Not(And(k3 >= 0, Not(j <= k3))),              result[k3] == k3)))I_end(T(vars)) is:	 And(And(j + 1 >= 1, j + 1 <= 100),    ForAll(k3,           Implies(And(k3 >= 0, k3 < j + 1),                   TMP$ARR_0[k3] == k3)))Simplified I_end(T(vars)) is:	 And(j >= 0,    j <= 99,    ForAll(k3,           Or(Not(And(k3 >= 0, Not(j <= -1 + k3))),              TMP$ARR_0[k3] == k3)))Array constraints: And(True, Store(result, j, result[j - 1] + 1) == TMP$ARR_0)PROVED***CONDITION***	j < 100False***HALT***R is:	And(True, Not(j < 100))Simplified R is:	100 <= jT is:	{result: result, j: j, i: i}I_start(vars) is:	 And(And(j >= 1, j <= 100),    ForAll(k3,           Implies(And(k3 >= 0, k3 < j), result[k3] == k3)))Simplified I_start(vars) is:	 And(j >= 1,    j <= 100,    ForAll(k3,           Or(Not(And(k3 >= 0, Not(j <= k3))),              result[k3] == k3)))I_end(T(vars)) is:	 ForAll(k1,       Implies(And(k1 >= 0, k1 < 100), result[k1] == k1))Simplified I_end(T(vars)) is:	 ForAll(k1,       Or(Not(And(k1 >= 0, Not(100 <= k1))),          result[k1] == k1))Array constraints: TruePROVEDPROGRAM VARIABLES:ijresultPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\b1.c.ast.json -f test_exists
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 1 paths:***START******ASSIGNMENT***	array[13] = 77***HALT***R is:	TrueSimplified R is:	TrueT is:	{array: TMP$ARR_0}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 Exists(i, And(And(i >= 0, i < 100), TMP$ARR_0[i] == 77))Simplified I_end(T(vars)) is:	 Exists(i, And(i >= 0, Not(100 <= i), TMP$ARR_0[i] == 77))Array constraints: And(True, Store(array, 13, 77) == TMP$ARR_0)PROVEDPROGRAM VARIABLES:arrayPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f add
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = x***ASSIGNMENT***	i = y***CONDITION***	i > 0R is:	TrueSimplified R is:	TrueT is:	{x: x, y: y, result: x, ret: ret, i: y}I_start(vars) is:	 y >= 0Simplified I_start(vars) is:	 y >= 0I_end(T(vars)) is:	 And(y >= 0, x + y == x + y)Simplified I_end(T(vars)) is:	 y >= 0Array constraints: TruePROVED***CONDITION***	i > 0True***ASSIGNMENT***	result = result + 1***ASSIGNMENT***	i = i - 1***CONDITION***	i > 0R is:	And(True, i > 0)Simplified R is:	Not(i <= 0)T is:	{x: x, y: y, result: result + 1, ret: ret, i: i - 1}I_start(vars) is:	 And(i >= 0, result + i == x + y)Simplified I_start(vars) is:	 And(i >= 0, result + i == x + y)I_end(T(vars)) is:	 And(i - 1 >= 0, result + 1 + i - 1 == x + y)Simplified I_end(T(vars)) is:	 And(i >= 1, result + i == x + y)Array constraints: TruePROVED***CONDITION***	i > 0False***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i > 0))Simplified R is:	i <= 0T is:	{x: x, y: y, result: result, ret: result, i: i}I_start(vars) is:	 And(i >= 0, result + i == x + y)Simplified I_start(vars) is:	 And(i >= 0, result + i == x + y)I_end(T(vars)) is:	 result == x + ySimplified I_end(T(vars)) is:	 result == x + yArray constraints: TruePROVEDPROGRAM VARIABLES:iresultretxyPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f sub
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = x***ASSIGNMENT***	i = y***CONDITION***	i > 0R is:	TrueSimplified R is:	TrueT is:	{x: x, y: y, result: x, ret: ret, i: y}I_start(vars) is:	 y >= 0Simplified I_start(vars) is:	 y >= 0I_end(T(vars)) is:	 And(y >= 0, x - y == x - y)Simplified I_end(T(vars)) is:	 y >= 0Array constraints: TruePROVED***CONDITION***	i > 0True***ASSIGNMENT***	result = result - 1***ASSIGNMENT***	i = i - 1***CONDITION***	i > 0R is:	And(True, i > 0)Simplified R is:	Not(i <= 0)T is:	{x: x, y: y, result: result - 1, ret: ret, i: i - 1}I_start(vars) is:	 And(i >= 0, result - i == x - y)Simplified I_start(vars) is:	 And(i >= 0, result + -1*i == x + -1*y)I_end(T(vars)) is:	 And(i - 1 >= 0, result - 1 - (i - 1) == x - y)Simplified I_end(T(vars)) is:	 And(i >= 1, result + -1*i == x + -1*y)Array constraints: TruePROVED***CONDITION***	i > 0False***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i > 0))Simplified R is:	i <= 0T is:	{x: x, y: y, result: result, ret: result, i: i}I_start(vars) is:	 And(i >= 0, result - i == x - y)Simplified I_start(vars) is:	 And(i >= 0, result + -1*i == x + -1*y)I_end(T(vars)) is:	 result == x - ySimplified I_end(T(vars)) is:	 result == x + -1*yArray constraints: TruePROVEDPROGRAM VARIABLES:iresultretxyPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f mul
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = 0***ASSIGNMENT***	i = y***CONDITION***	i > 0R is:	TrueSimplified R is:	TrueT is:	{x: x, y: y, result: 0, ret: ret, i: y}I_start(vars) is:	 y >= 0Simplified I_start(vars) is:	 y >= 0I_end(T(vars)) is:	 And(y >= 0, 0 + x*y == x*y)Simplified I_end(T(vars)) is:	 y >= 0Array constraints: TruePROVED***CONDITION***	i > 0True***ASSIGNMENT***	result = result + x***ASSIGNMENT***	i = i - 1***CONDITION***	i > 0R is:	And(True, i > 0)Simplified R is:	Not(i <= 0)T is:	{x: x, y: y, result: result + x, ret: ret, i: i - 1}I_start(vars) is:	 And(i >= 0, result + x*i == x*y)Simplified I_start(vars) is:	 And(i >= 0, result + i*x == x*y)I_end(T(vars)) is:	 And(i - 1 >= 0, result + x + x*(i - 1) == x*y)Simplified I_end(T(vars)) is:	 And(i >= 1, result + x + x*(-1 + i) == x*y)Array constraints: TruePROVED***CONDITION***	i > 0False***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i > 0))Simplified R is:	i <= 0T is:	{x: x, y: y, result: result, ret: result, i: i}I_start(vars) is:	 And(i >= 0, result + x*i == x*y)Simplified I_start(vars) is:	 And(i >= 0, result + i*x == x*y)I_end(T(vars)) is:	 result == x*ySimplified I_end(T(vars)) is:	 result == x*yArray constraints: TruePROVEDPROGRAM VARIABLES:iresultretxyPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f div
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = 0***ASSIGNMENT***	i = x***CONDITION***	i >= yR is:	TrueSimplified R is:	TrueT is:	{x: x, y: y, result: 0, ret: ret, i: x}I_start(vars) is:	 And(x > 0, y > 0)Simplified I_start(vars) is:	 And(Not(x <= 0), Not(y <= 0))I_end(T(vars)) is:	 And(And(And(x > 0, y > 0), And(x >= 0, x <= x)),    x/y - x/y == 0)Simplified I_end(T(vars)) is:	 And(Not(x <= 0), Not(y <= 0), x >= 0)Array constraints: TruePROVED***CONDITION***	i >= yTrue***ASSIGNMENT***	result = result + 1***ASSIGNMENT***	i = i - y***CONDITION***	i >= yR is:	And(True, i >= y)Simplified R is:	i >= yT is:	{x: x, y: y, result: result + 1, ret: ret, i: i - y}I_start(vars) is:	 And(And(And(x > 0, y > 0), And(i >= 0, i <= x)),    result == x/y - i/y)Simplified I_start(vars) is:	 And(Not(x <= 0),    Not(y <= 0),    i >= 0,    i <= x,    result == x/y + -1*(i/y))I_end(T(vars)) is:	 And(And(And(x > 0, y > 0), And(i - y >= 0, i - y <= x)),    result + 1 == x/y - (i - y)/y)Simplified I_end(T(vars)) is:	 And(Not(x <= 0),    Not(y <= 0),    i + -1*y >= 0,    i + -1*y <= x,    result == -1 + x/y + -1*((i + -1*y)/y))Array constraints: TruePROVED***CONDITION***	i >= yFalse***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i >= y))Simplified R is:	Not(i >= y)T is:	{x: x, y: y, result: result, ret: result, i: i}I_start(vars) is:	 And(And(And(x > 0, y > 0), And(i >= 0, i <= x)),    result == x/y - i/y)Simplified I_start(vars) is:	 And(Not(x <= 0),    Not(y <= 0),    i >= 0,    i <= x,    result == x/y + -1*(i/y))I_end(T(vars)) is:	 result == x/ySimplified I_end(T(vars)) is:	 result == x/yArray constraints: TruePROVEDPROGRAM VARIABLES:iresultretxyPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f mod
Verifier did not response for more than 5 seconds. The process was killed.
FAILED TO PROVE




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f abs
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 2 paths:***START******CONDITION***	x < 0False***ASSIGNMENT***	ret = x***HALT***R is:	And(True, Not(x < 0))Simplified R is:	0 <= xT is:	{x: x, ret: x}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 Not(And(Not(And(x >= 0, x == x)), Not(And(x < 0, x == -x))))Simplified I_end(T(vars)) is:	 Not(And(Not(x >= 0), Not(And(Not(0 <= x), x == 0))))Array constraints: TruePROVED***START******CONDITION***	x < 0True***ASSIGNMENT***	ret = -x***HALT***R is:	And(True, x < 0)Simplified R is:	Not(0 <= x)T is:	{x: x, ret: -x}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 Not(And(Not(And(x >= 0, -x == x)),        Not(And(x < 0, -x == -x))))Simplified I_end(T(vars)) is:	 Not(And(Not(And(x >= 0, x == 0)), 0 <= x))Array constraints: TruePROVEDPROGRAM VARIABLES:retxPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\basic_math.c.ast.json -f fibonacci_1000_array
Verifier did not response for more than 5 seconds. The process was killed.
FAILED TO PROVE




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\factorials.c.ast.json -f five_factorials
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 1 paths:***START******ASSIGNMENT***	i = 0***ASSIGNMENT***	results[i] = 1***ASSIGNMENT***	i = i + 1***ASSIGNMENT***	results[i] = 2*results[0]***ASSIGNMENT***	i = i + 1***ASSIGNMENT***	results[i] = 3*results[1]***ASSIGNMENT***	i = i + 1***ASSIGNMENT***	results[i] = 4*results[2]***ASSIGNMENT***	i = i + 1***ASSIGNMENT***	results[i] = 5*results[3]***HALT***R is:	TrueSimplified R is:	TrueT is:	{results: TMP$ARR_0, i: 4, TMP$ARR_0: TMP$ARR_1, TMP$ARR_1: TMP$ARR_2, TMP$ARR_2: TMP$ARR_3, TMP$ARR_3: TMP$ARR_4}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(And(And(And(True, True), TMP$ARR_4[0] == 1),                TMP$ARR_4[1] == 2),            TMP$ARR_4[2] == 6),        TMP$ARR_4[3] == 24),    TMP$ARR_4[4] == 120)Simplified I_end(T(vars)) is:	 And(TMP$ARR_4[0] == 1,    TMP$ARR_4[1] == 2,    TMP$ARR_4[2] == 6,    TMP$ARR_4[3] == 24,    TMP$ARR_4[4] == 120)Array constraints: And(And(And(And(And(True, Store(results, 0, 1) == TMP$ARR_0),                Store(TMP$ARR_0, 1, 2*TMP$ARR_0[0]) ==                TMP$ARR_1),            Store(TMP$ARR_1, 2, 3*TMP$ARR_1[1]) == TMP$ARR_2),        Store(TMP$ARR_2, 3, 4*TMP$ARR_2[2]) == TMP$ARR_3),    Store(TMP$ARR_3, 4, 5*TMP$ARR_3[3]) == TMP$ARR_4)PROVEDPROGRAM VARIABLES:iresultsPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\factorials.c.ast.json -f factorial_with_while
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = 1***ASSIGNMENT***	i = n***CONDITION***	i > 0R is:	TrueSimplified R is:	TrueT is:	{n: n, i: n, result: 1, ret: ret}I_start(vars) is:	 And(n >= 0, n <= 10)Simplified I_start(vars) is:	 And(n >= 0, n <= 10)I_end(T(vars)) is:	 And(And(And(And(n >= 0, n >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0,                                        I == 1),                                        And(n == 1, I == 1)),                                       And(n == 2, I == 2)),                                    And(n == 3, I == 6)),                                 And(n == 4, I == 24)),                              And(n == 5, I == 120)),                           And(n == 6, I == 720)),                        And(n == 7, I == 5040)),                     And(n == 8, I == 40320)),                  And(n == 9, I == 362880)),               And(n == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    1*I == N)Simplified I_end(T(vars)) is:	 And(n >= 0,    Or(And(n == 0, I == 1),       And(n == 1, I == 1),       And(n == 2, I == 2),       And(n == 3, I == 6),       And(n == 4, I == 24),       And(n == 5, I == 120),       And(n == 6, I == 720),       And(n == 7, I == 5040),       And(n == 8, I == 40320),       And(n == 9, I == 362880),       And(n == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I == N)Array constraints: TrueFAILED TO PROVE. ASSIGNMENT:I = 11n = 0***CONDITION***	i > 0True***ASSIGNMENT***	result = result*i***ASSIGNMENT***	i = i - 1***CONDITION***	i > 0R is:	And(True, i > 0)Simplified R is:	Not(i <= 0)T is:	{n: n, i: i - 1, result: result*i, ret: ret}I_start(vars) is:	 And(And(And(And(n >= 0, i >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i == 0,                                        I == 1),                                        And(i == 1, I == 1)),                                       And(i == 2, I == 2)),                                    And(i == 3, I == 6)),                                 And(i == 4, I == 24)),                              And(i == 5, I == 120)),                           And(i == 6, I == 720)),                        And(i == 7, I == 5040)),                     And(i == 8, I == 40320)),                  And(i == 9, I == 362880)),               And(i == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*I == N)Simplified I_start(vars) is:	 And(n >= 0,    i >= 0,    Or(And(i == 0, I == 1),       And(i == 1, I == 1),       And(i == 2, I == 2),       And(i == 3, I == 6),       And(i == 4, I == 24),       And(i == 5, I == 120),       And(i == 6, I == 720),       And(i == 7, I == 5040),       And(i == 8, I == 40320),       And(i == 9, I == 362880),       And(i == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*result == N)I_end(T(vars)) is:	 And(And(And(And(n >= 0, i - 1 >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i - 1 == 0,                                        I == 1),                                        And(i - 1 == 1,                                        I == 1)),                                       And(i - 1 == 2,                                        I == 2)),                                    And(i - 1 == 3, I == 6)),                                 And(i - 1 == 4, I == 24)),                              And(i - 1 == 5, I == 120)),                           And(i - 1 == 6, I == 720)),                        And(i - 1 == 7, I == 5040)),                     And(i - 1 == 8, I == 40320)),                  And(i - 1 == 9, I == 362880)),               And(i - 1 == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*i*I == N)Simplified I_end(T(vars)) is:	 And(n >= 0,    i >= 1,    Or(And(i == 1, I == 1),       And(i == 2, I == 1),       And(i == 3, I == 2),       And(i == 4, I == 6),       And(i == 5, I == 24),       And(i == 6, I == 120),       And(i == 7, I == 720),       And(i == 8, I == 5040),       And(i == 9, I == 40320),       And(i == 10, I == 362880),       And(i == 11, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*i*result == N)Array constraints: TrueFAILED TO PROVE. ASSIGNMENT:i = 10N = 3628800result = 1I = 3628800n = 10***CONDITION***	i > 0False***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i > 0))Simplified R is:	i <= 0T is:	{n: n, i: i, result: result, ret: result}I_start(vars) is:	 And(And(And(And(n >= 0, i >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i == 0,                                        I == 1),                                        And(i == 1, I == 1)),                                       And(i == 2, I == 2)),                                    And(i == 3, I == 6)),                                 And(i == 4, I == 24)),                              And(i == 5, I == 120)),                           And(i == 6, I == 720)),                        And(i == 7, I == 5040)),                     And(i == 8, I == 40320)),                  And(i == 9, I == 362880)),               And(i == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*I == N)Simplified I_start(vars) is:	 And(n >= 0,    i >= 0,    Or(And(i == 0, I == 1),       And(i == 1, I == 1),       And(i == 2, I == 2),       And(i == 3, I == 6),       And(i == 4, I == 24),       And(i == 5, I == 120),       And(i == 6, I == 720),       And(i == 7, I == 5040),       And(i == 8, I == 40320),       And(i == 9, I == 362880),       And(i == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*result == N)I_end(T(vars)) is:	 Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, result == 1),                              And(n == 1, result == 1)),                           And(n == 2, result == 2)),                        And(n == 3, result == 6)),                     And(n == 4, result == 24)),                  And(n == 5, result == 120)),               And(n == 6, result == 720)),            And(n == 7, result == 5040)),         And(n == 8, result == 40320)),      And(n == 9, result == 362880)),   And(n == 10, result == 3628800))Simplified I_end(T(vars)) is:	 Or(And(n == 0, result == 1),   And(n == 1, result == 1),   And(n == 2, result == 2),   And(n == 3, result == 6),   And(n == 4, result == 24),   And(n == 5, result == 120),   And(n == 6, result == 720),   And(n == 7, result == 5040),   And(n == 8, result == 40320),   And(n == 9, result == 362880),   And(n == 10, result == 3628800))Array constraints: TruePROVEDPROGRAM VARIABLES:inresultretFAILED TO PROVE THE PROGRAM. SEE THE FOLLOWING PATHS:Path begin at: ***START***Path ends at ***CONDITION***	i > 0Path action items are [None, None, None]Path begin at: ***CONDITION***	i > 0Path ends at ***CONDITION***	i > 0Path action items are [True, None, None]




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\factorials.c.ast.json -f factorial_with_for
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 3 paths:***START******ASSIGNMENT***	result = 1***ASSIGNMENT***	i = n***CONDITION***	i > 0R is:	TrueSimplified R is:	TrueT is:	{n: n, result: 1, ret: ret, i: n}I_start(vars) is:	 And(n >= 0, n <= 10)Simplified I_start(vars) is:	 And(n >= 0, n <= 10)I_end(T(vars)) is:	 And(And(And(And(n >= 0, n >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0,                                        I == 1),                                        And(n == 1, I == 1)),                                       And(n == 2, I == 2)),                                    And(n == 3, I == 6)),                                 And(n == 4, I == 24)),                              And(n == 5, I == 120)),                           And(n == 6, I == 720)),                        And(n == 7, I == 5040)),                     And(n == 8, I == 40320)),                  And(n == 9, I == 362880)),               And(n == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    1*I == N)Simplified I_end(T(vars)) is:	 And(n >= 0,    Or(And(n == 0, I == 1),       And(n == 1, I == 1),       And(n == 2, I == 2),       And(n == 3, I == 6),       And(n == 4, I == 24),       And(n == 5, I == 120),       And(n == 6, I == 720),       And(n == 7, I == 5040),       And(n == 8, I == 40320),       And(n == 9, I == 362880),       And(n == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I == N)Array constraints: TrueFAILED TO PROVE. ASSIGNMENT:I = 11n = 0***CONDITION***	i > 0True***ASSIGNMENT***	result = result*i***ASSIGNMENT***	i = i - 1***CONDITION***	i > 0R is:	And(True, i > 0)Simplified R is:	Not(i <= 0)T is:	{n: n, result: result*i, ret: ret, i: i - 1}I_start(vars) is:	 And(And(And(And(n >= 0, i >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i == 0,                                        I == 1),                                        And(i == 1, I == 1)),                                       And(i == 2, I == 2)),                                    And(i == 3, I == 6)),                                 And(i == 4, I == 24)),                              And(i == 5, I == 120)),                           And(i == 6, I == 720)),                        And(i == 7, I == 5040)),                     And(i == 8, I == 40320)),                  And(i == 9, I == 362880)),               And(i == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*I == N)Simplified I_start(vars) is:	 And(n >= 0,    i >= 0,    Or(And(i == 0, I == 1),       And(i == 1, I == 1),       And(i == 2, I == 2),       And(i == 3, I == 6),       And(i == 4, I == 24),       And(i == 5, I == 120),       And(i == 6, I == 720),       And(i == 7, I == 5040),       And(i == 8, I == 40320),       And(i == 9, I == 362880),       And(i == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*result == N)I_end(T(vars)) is:	 And(And(And(And(n >= 0, i - 1 >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i - 1 == 0,                                        I == 1),                                        And(i - 1 == 1,                                        I == 1)),                                       And(i - 1 == 2,                                        I == 2)),                                    And(i - 1 == 3, I == 6)),                                 And(i - 1 == 4, I == 24)),                              And(i - 1 == 5, I == 120)),                           And(i - 1 == 6, I == 720)),                        And(i - 1 == 7, I == 5040)),                     And(i - 1 == 8, I == 40320)),                  And(i - 1 == 9, I == 362880)),               And(i - 1 == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*i*I == N)Simplified I_end(T(vars)) is:	 And(n >= 0,    i >= 1,    Or(And(i == 1, I == 1),       And(i == 2, I == 1),       And(i == 3, I == 2),       And(i == 4, I == 6),       And(i == 5, I == 24),       And(i == 6, I == 120),       And(i == 7, I == 720),       And(i == 8, I == 5040),       And(i == 9, I == 40320),       And(i == 10, I == 362880),       And(i == 11, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*i*result == N)Array constraints: TrueFAILED TO PROVE. ASSIGNMENT:i = 10N = 3628800result = 1I = 3628800n = 10***CONDITION***	i > 0False***ASSIGNMENT***	ret = result***HALT***R is:	And(True, Not(i > 0))Simplified R is:	i <= 0T is:	{n: n, result: result, ret: result, i: i}I_start(vars) is:	 And(And(And(And(n >= 0, i >= 0),            Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(i == 0,                                        I == 1),                                        And(i == 1, I == 1)),                                       And(i == 2, I == 2)),                                    And(i == 3, I == 6)),                                 And(i == 4, I == 24)),                              And(i == 5, I == 120)),                           And(i == 6, I == 720)),                        And(i == 7, I == 5040)),                     And(i == 8, I == 40320)),                  And(i == 9, I == 362880)),               And(i == 10, I == 3628800))),        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, N == 1),                                      And(n == 1, N == 1)),                                   And(n == 2, N == 2)),                                And(n == 3, N == 6)),                             And(n == 4, N == 24)),                          And(n == 5, N == 120)),                       And(n == 6, N == 720)),                    And(n == 7, N == 5040)),                 And(n == 8, N == 40320)),              And(n == 9, N == 362880)),           And(n == 10, N == 3628800))),    result*I == N)Simplified I_start(vars) is:	 And(n >= 0,    i >= 0,    Or(And(i == 0, I == 1),       And(i == 1, I == 1),       And(i == 2, I == 2),       And(i == 3, I == 6),       And(i == 4, I == 24),       And(i == 5, I == 120),       And(i == 6, I == 720),       And(i == 7, I == 5040),       And(i == 8, I == 40320),       And(i == 9, I == 362880),       And(i == 10, I == 3628800)),    Or(And(n == 0, N == 1),       And(n == 1, N == 1),       And(n == 2, N == 2),       And(n == 3, N == 6),       And(n == 4, N == 24),       And(n == 5, N == 120),       And(n == 6, N == 720),       And(n == 7, N == 5040),       And(n == 8, N == 40320),       And(n == 9, N == 362880),       And(n == 10, N == 3628800)),    I*result == N)I_end(T(vars)) is:	 Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(n == 0, result == 1),                              And(n == 1, result == 1)),                           And(n == 2, result == 2)),                        And(n == 3, result == 6)),                     And(n == 4, result == 24)),                  And(n == 5, result == 120)),               And(n == 6, result == 720)),            And(n == 7, result == 5040)),         And(n == 8, result == 40320)),      And(n == 9, result == 362880)),   And(n == 10, result == 3628800))Simplified I_end(T(vars)) is:	 Or(And(n == 0, result == 1),   And(n == 1, result == 1),   And(n == 2, result == 2),   And(n == 3, result == 6),   And(n == 4, result == 24),   And(n == 5, result == 120),   And(n == 6, result == 720),   And(n == 7, result == 5040),   And(n == 8, result == 40320),   And(n == 9, result == 362880),   And(n == 10, result == 3628800))Array constraints: TruePROVEDPROGRAM VARIABLES:inresultretFAILED TO PROVE THE PROGRAM. SEE THE FOLLOWING PATHS:Path begin at: ***START***Path ends at ***CONDITION***	i > 0Path action items are [None, None, None]Path begin at: ***CONDITION***	i > 0Path ends at ***CONDITION***	i > 0Path action items are [True, None, None]




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\min3.c.ast.json -f min3_v1
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 4 paths:***START******CONDITION***	x < yFalse***CONDITION***	y < zFalse***ASSIGNMENT***	ret = z***HALT***R is:	And(And(True, Not(x < y)), Not(y < z))Simplified R is:	And(y <= x, z <= y)T is:	{x: x, y: y, z: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVED***START******CONDITION***	x < yFalse***CONDITION***	y < zTrue***ASSIGNMENT***	ret = y***HALT***R is:	And(And(True, Not(x < y)), y < z)Simplified R is:	And(y <= x, Not(z <= y))T is:	{x: x, y: y, z: z, ret: y}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(y == x, y == y), y == z), y <= x), y <= y),    y <= z)Simplified I_end(T(vars)) is:	 And(y <= x, y <= z)Array constraints: TruePROVED***START******CONDITION***	x < yTrue***CONDITION***	x < zFalse***ASSIGNMENT***	ret = z***HALT***R is:	And(And(True, x < y), Not(x < z))Simplified R is:	And(Not(y <= x), z <= x)T is:	{x: x, y: y, z: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVED***START******CONDITION***	x < yTrue***CONDITION***	x < zTrue***ASSIGNMENT***	ret = x***HALT***R is:	And(And(True, x < y), x < z)Simplified R is:	And(Not(y <= x), Not(z <= x))T is:	{x: x, y: y, z: z, ret: x}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),    x <= z)Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)Array constraints: TruePROVEDPROGRAM VARIABLES:retxyzPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\min3.c.ast.json -f min3_v2
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 4 paths:***START******CONDITION***	x < yFalse***CONDITION***	y < zFalse***ASSIGNMENT***	ret = z***HALT***R is:	And(And(True, Not(x < y)), Not(y < z))Simplified R is:	And(y <= x, z <= y)T is:	{x: x, y: y, z: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVED***START******CONDITION***	x < yFalse***CONDITION***	y < zTrue***ASSIGNMENT***	ret = y***HALT***R is:	And(And(True, Not(x < y)), y < z)Simplified R is:	And(y <= x, Not(z <= y))T is:	{x: x, y: y, z: z, ret: y}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(y == x, y == y), y == z), y <= x), y <= y),    y <= z)Simplified I_end(T(vars)) is:	 And(y <= x, y <= z)Array constraints: TruePROVED***START******CONDITION***	x < yTrue***CONDITION***	x < zFalse***ASSIGNMENT***	ret = z***HALT***R is:	And(And(True, x < y), Not(x < z))Simplified R is:	And(Not(y <= x), z <= x)T is:	{x: x, y: y, z: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVED***START******CONDITION***	x < yTrue***CONDITION***	x < zTrue***ASSIGNMENT***	ret = x***HALT***R is:	And(And(True, x < y), x < z)Simplified R is:	And(Not(y <= x), Not(z <= x))T is:	{x: x, y: y, z: z, ret: x}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),    x <= z)Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)Array constraints: TruePROVEDPROGRAM VARIABLES:retxyzPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\min3.c.ast.json -f min3_v3
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 4 paths:***START******ASSIGNMENT***	tmp = x***CONDITION***	y < tmpFalse***CONDITION***	z < tmpFalse***ASSIGNMENT***	ret = tmp***HALT***R is:	And(And(True, Not(y < x)), Not(z < x))Simplified R is:	And(x <= y, x <= z)T is:	{x: x, y: y, z: z, tmp: x, ret: x}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(x == x, x == y), x == z), x <= x), x <= y),    x <= z)Simplified I_end(T(vars)) is:	 And(x <= y, x <= z)Array constraints: TruePROVED***START******ASSIGNMENT***	tmp = x***CONDITION***	y < tmpFalse***CONDITION***	z < tmpTrue***ASSIGNMENT***	tmp = z***ASSIGNMENT***	ret = tmp***HALT***R is:	And(And(True, Not(y < x)), z < x)Simplified R is:	And(x <= y, Not(x <= z))T is:	{x: x, y: y, z: z, tmp: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVED***START******ASSIGNMENT***	tmp = x***CONDITION***	y < tmpTrue***ASSIGNMENT***	tmp = y***CONDITION***	z < tmpFalse***ASSIGNMENT***	ret = tmp***HALT***R is:	And(And(True, y < x), Not(z < y))Simplified R is:	And(Not(x <= y), y <= z)T is:	{x: x, y: y, z: z, tmp: y, ret: y}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(y == x, y == y), y == z), y <= x), y <= y),    y <= z)Simplified I_end(T(vars)) is:	 And(y <= x, y <= z)Array constraints: TruePROVED***START******ASSIGNMENT***	tmp = x***CONDITION***	y < tmpTrue***ASSIGNMENT***	tmp = y***CONDITION***	z < tmpTrue***ASSIGNMENT***	tmp = z***ASSIGNMENT***	ret = tmp***HALT***R is:	And(And(True, y < x), z < y)Simplified R is:	And(Not(x <= y), Not(y <= z))T is:	{x: x, y: y, z: z, tmp: z, ret: z}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(Or(Or(z == x, z == y), z == z), z <= x), z <= y),    z <= z)Simplified I_end(T(vars)) is:	 And(z <= x, z <= y)Array constraints: TruePROVEDPROGRAM VARIABLES:rettmpxyzPROGRAM IS SUCCESSFULLY PROVED




*****************************************************************************************************************
Executing command: D:\Python\3.9.2\python.exe main.py -j benchmarks\json\sort.c.ast.json -f max_sort
temp_configuration.c  -->  temp_configuration.c.ast.jsonFound 6 paths:***START******ASSIGNMENT***	length = 1000***CONDITION***	length >= 1R is:	TrueSimplified R is:	TrueT is:	{array: array, tmp: tmp, length: 1000, i_max: i_max, i: i}I_start(vars) is:	 TrueSimplified I_start(vars) is:	 TrueI_end(T(vars)) is:	 And(And(And(True, True),        ForAll(j2,               Implies(And(j2 > 1000, j2 < 1000),                       array[j2 - 1] <= array[j2]))),    Implies(False,            ForAll(j3,                   Implies(And(j3 >= 0, j3 < 1000),                           array[j3] <= array[1000]))))Simplified I_end(T(vars)) is:	 ForAll(j2,       Or(Not(And(Not(j2 <= 1000), Not(1000 <= j2))),          array[-1 + j2] <= array[j2]))Array constraints: TruePROVED***CONDITION***	length >= 1True***ASSIGNMENT***	i = 0***ASSIGNMENT***	i_max = 0***ASSIGNMENT***	i = 1***CONDITION***	i < lengthR is:	And(True, length >= 1)Simplified R is:	length >= 1T is:	{array: array, tmp: tmp, length: length, i_max: 0, i: 1}I_start(vars) is:	 And(And(And(length >= 0, length <= 1000),        ForAll(j2,               Implies(And(length < j2, j2 < 1000),                       array[j2 - 1] <= array[j2]))),    Implies(length < 1000,            ForAll(j3,                   Implies(And(j3 >= 0, j3 < length),                           array[j3] <= array[length]))))Simplified I_start(vars) is:	 And(length >= 0,    length <= 1000,    ForAll(j2,           Or(Not(And(Not(j2 <= length), Not(1000 <= j2))),              array[-1 + j2] <= array[j2])),    Or(1000 <= length,       ForAll(j3,              Or(Not(And(j3 >= 0, Not(length <= j3))),                 array[j3] <= array[length]))))I_end(T(vars)) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            True),                        length >= 1),                    True),                length > 0),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < 1),                           array[j4] <= array[0]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_end(T(vars)) is:	 And(Not(length <= 0),    length <= 1000,    length >= 1,    ForAll(j4,           Or(Not(And(j4 >= 0, Not(1 <= j4))),              array[j4] <= array[0])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))Array constraints: TruePROVED***CONDITION***	length >= 1False***HALT***R is:	And(True, Not(length >= 1))Simplified R is:	Not(length >= 1)T is:	{array: array, tmp: tmp, length: length, i_max: i_max, i: i}I_start(vars) is:	 And(And(And(length >= 0, length <= 1000),        ForAll(j2,               Implies(And(length < j2, j2 < 1000),                       array[j2 - 1] <= array[j2]))),    Implies(length < 1000,            ForAll(j3,                   Implies(And(j3 >= 0, j3 < length),                           array[j3] <= array[length]))))Simplified I_start(vars) is:	 And(length >= 0,    length <= 1000,    ForAll(j2,           Or(Not(And(Not(j2 <= length), Not(1000 <= j2))),              array[-1 + j2] <= array[j2])),    Or(1000 <= length,       ForAll(j3,              Or(Not(And(j3 >= 0, Not(length <= j3))),                 array[j3] <= array[length]))))I_end(T(vars)) is:	 ForAll(j1,       Implies(And(j1 > 0, j1 < 1000),               array[j1 - 1] <= array[j1]))Simplified I_end(T(vars)) is:	 ForAll(j1,       Or(Not(And(Not(j1 <= 0), Not(1000 <= j1))),          array[-1 + j1] <= array[j1]))Array constraints: TruePROVED***CONDITION***	i < lengthTrue***CONDITION***	array[i] > array[i_max]False***ASSIGNMENT***	i = i + 1***CONDITION***	i < lengthR is:	And(And(True, i < length), Not(array[i] > array[i_max]))Simplified R is:	And(Not(length <= i), array[i] <= array[i_max])T is:	{array: array, tmp: tmp, length: length, i_max: i_max, i: i + 1}I_start(vars) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            i >= 0),                        i <= length),                    i_max >= 0),                i_max < length),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < i),                           array[j4] <= array[i_max]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_start(vars) is:	 And(Not(length <= 0),    length <= 1000,    i >= 0,    i <= length,    i_max >= 0,    Not(length <= i_max),    ForAll(j4,           Or(Not(And(j4 >= 0, Not(i <= j4))),              array[j4] <= array[i_max])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))I_end(T(vars)) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            i + 1 >= 0),                        i + 1 <= length),                    i_max >= 0),                i_max < length),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < i + 1),                           array[j4] <= array[i_max]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_end(T(vars)) is:	 And(Not(length <= 0),    length <= 1000,    i >= -1,    i <= -1 + length,    i_max >= 0,    Not(length <= i_max),    ForAll(j4,           Or(Not(And(j4 >= 0, Not(i <= -1 + j4))),              array[j4] <= array[i_max])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))Array constraints: TruePROVED***CONDITION***	i < lengthTrue***CONDITION***	array[i] > array[i_max]True***ASSIGNMENT***	i_max = i***ASSIGNMENT***	i = i + 1***CONDITION***	i < lengthR is:	And(And(True, i < length), array[i] > array[i_max])Simplified R is:	And(Not(length <= i), Not(array[i] <= array[i_max]))T is:	{array: array, tmp: tmp, length: length, i_max: i, i: i + 1}I_start(vars) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            i >= 0),                        i <= length),                    i_max >= 0),                i_max < length),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < i),                           array[j4] <= array[i_max]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_start(vars) is:	 And(Not(length <= 0),    length <= 1000,    i >= 0,    i <= length,    i_max >= 0,    Not(length <= i_max),    ForAll(j4,           Or(Not(And(j4 >= 0, Not(i <= j4))),              array[j4] <= array[i_max])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))I_end(T(vars)) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            i + 1 >= 0),                        i + 1 <= length),                    i >= 0),                i < length),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < i + 1),                           array[j4] <= array[i]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_end(T(vars)) is:	 And(Not(length <= 0),    length <= 1000,    i >= -1,    i <= -1 + length,    i >= 0,    Not(length <= i),    ForAll(j4,           Or(Not(And(j4 >= 0, Not(i <= -1 + j4))),              array[j4] <= array[i])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))Array constraints: TruePROVED***CONDITION***	i < lengthFalse***ASSIGNMENT***	tmp = array[length - 1]***ASSIGNMENT***	array[length - 1] = array[i_max]***ASSIGNMENT***	array[i_max] = tmp***ASSIGNMENT***	length = length - 1***CONDITION***	length >= 1R is:	And(True, Not(i < length))Simplified R is:	length <= iT is:	{array: TMP$ARR_0, tmp: array[length - 1], length: length - 1, i_max: i_max, i: i, TMP$ARR_0: TMP$ARR_1}I_start(vars) is:	 And(And(And(And(And(And(And(And(length > 0, length <= 1000),                            i >= 0),                        i <= length),                    i_max >= 0),                i_max < length),            ForAll(j4,                   Implies(And(j4 >= 0, j4 < i),                           array[j4] <= array[i_max]))),        ForAll(j5,               Implies(And(length < j5, j5 < 1000),                       array[j5 - 1] <= array[j5]))),    Implies(length < 1000,            ForAll(j6,                   Implies(And(j6 >= 0, j6 < length),                           array[j6] <= array[length]))))Simplified I_start(vars) is:	 And(Not(length <= 0),    length <= 1000,    i >= 0,    i <= length,    i_max >= 0,    Not(length <= i_max),    ForAll(j4,           Or(Not(And(j4 >= 0, Not(i <= j4))),              array[j4] <= array[i_max])),    ForAll(j5,           Or(Not(And(Not(j5 <= length), Not(1000 <= j5))),              array[-1 + j5] <= array[j5])),    Or(1000 <= length,       ForAll(j6,              Or(Not(And(j6 >= 0, Not(length <= j6))),                 array[j6] <= array[length]))))I_end(T(vars)) is:	 And(And(And(length - 1 >= 0, length - 1 <= 1000),        ForAll(j2,               Implies(And(length - 1 < j2, j2 < 1000),                       TMP$ARR_1[j2 - 1] <= TMP$ARR_1[j2]))),    Implies(length - 1 < 1000,            ForAll(j3,                   Implies(And(j3 >= 0, j3 < length - 1),                           TMP$ARR_1[j3] <=                           TMP$ARR_1[length - 1]))))Simplified I_end(T(vars)) is:	 And(length >= 1,    length <= 1001,    ForAll(j2,           Or(Not(And(Not(j2 <= -1 + length),                      Not(1000 <= j2))),              TMP$ARR_1[-1 + j2] <= TMP$ARR_1[j2])),    Or(1001 <= length,       ForAll(j3,              Or(Not(And(j3 >= 0, Not(length <= 1 + j3))),                 TMP$ARR_1[j3] <= TMP$ARR_1[-1 + length]))))Array constraints: And(And(True,        Store(array, length - 1, array[i_max]) == TMP$ARR_0),    Store(TMP$ARR_0, i_max, array[length - 1]) == TMP$ARR_1)PROVEDPROGRAM VARIABLES:arrayii_maxlengthtmpPROGRAM IS SUCCESSFULLY PROVED




